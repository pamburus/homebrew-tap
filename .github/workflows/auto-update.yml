name: Auto Update Formulas

on:
  schedule:
    - cron: "0 6 * * *"  # Daily at 6 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  actions: read

defaults:
  run:
    shell: bash -euxo pipefail {0}

jobs:
  detect-updates:
    runs-on: ubuntu-latest
    outputs:
      updates: ${{ steps.check.outputs.updates }}
    steps:
      - uses: actions/checkout@v4
      - uses: Homebrew/actions/setup-homebrew@master

      - name: Check for updates
        id: check
        run: |
          updates="[]"
          for formula in Formula/*.rb; do
            package=$(basename "$formula" .rb)
            echo "Checking $package..."

            # Check if there are newer versions available
            newer_versions=$(brew livecheck --quiet --newer-only --json "$package" 2>/dev/null | jq -r '.[].version.latest // empty' || true)

            if [[ -n "$newer_versions" ]]; then
              for version in $newer_versions; do
                echo "Found update: $package -> $version"
                updates=$(echo "$updates" | jq --arg pkg "$package" --arg ver "$version" '. += [{"package": $pkg, "version": $ver}]')
              done
            fi
          done

          echo "updates=$updates" >> $GITHUB_OUTPUT
          echo "Found updates: $updates"

  update-formula:
    needs: detect-updates
    if: needs.detect-updates.outputs.updates != '[]'
    strategy:
      matrix:
        update: ${{ fromJson(needs.detect-updates.outputs.updates) }}
        os: [ubuntu-24.04, macos-14, macos-15]
    runs-on: ${{ matrix.os }}
    outputs:
      bottles-${{ matrix.os }}: ${{ steps.build.outputs.bottles }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Update formula and build bottle
        id: build
        env:
          PACKAGE: ${{ matrix.update.package }}
          VERSION: ${{ matrix.update.version }}
        run: |
          echo "Updating $PACKAGE to $VERSION on ${{ matrix.os }}"

          # Update the formula version (without bottle info yet)
          brew bump-formula-pr --write-only --version="$VERSION" --no-browse "$PACKAGE"

          # Clean up and setup for bottle building
          brew test-bot --only-cleanup-before
          brew test-bot --only-setup

          # Build the bottle
          brew test-bot --only-formulae --skip-online-checks "$PACKAGE"

          # Check if bottles were created
          bottles=$(ls *.bottle.* 2>/dev/null | tr '\n' ' ' || echo "")
          echo "bottles=$bottles" >> $GITHUB_OUTPUT
          echo "Built bottles: $bottles"

      - name: Upload bottles
        if: steps.build.outputs.bottles != ''
        uses: actions/upload-artifact@v4
        with:
          name: bottles-${{ matrix.update.package }}-${{ matrix.update.version }}-${{ matrix.os }}
          path: "*.bottle.*"
          retention-days: 1

  integrate-bottles:
    needs: [detect-updates, update-formula]
    if: always() && needs.detect-updates.outputs.updates != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        update: ${{ fromJson(needs.detect-updates.outputs.updates) }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up git
        uses: Homebrew/actions/git-user-config@master

      - name: Download all bottles for this package
        uses: actions/download-artifact@v4
        with:
          pattern: bottles-${{ matrix.update.package }}-${{ matrix.update.version }}-*
          path: bottles/
          merge-multiple: true

      - name: Integrate bottles and commit
        env:
          PACKAGE: ${{ matrix.update.package }}
          VERSION: ${{ matrix.update.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Integrating bottles for $PACKAGE $VERSION"

          # Check if we have bottles to integrate
          bottle_files=$(find bottles/ -name "*.bottle.*" 2>/dev/null || true)
          if [[ -z "$bottle_files" ]]; then
            echo "No bottles found, updating formula without bottles"
            brew bump-formula-pr --write-only --version="$VERSION" --no-browse "$PACKAGE"
          else
            echo "Found bottles: $bottle_files"

            # Move bottles to current directory
            mv bottles/*.bottle.* . 2>/dev/null || true

            # Update formula with version first
            brew bump-formula-pr --write-only --version="$VERSION" --no-browse "$PACKAGE"

            # Generate bottle block and integrate it
            bottle_block=$(brew bottle --merge --write --no-commit "$PACKAGE" *.bottle.* 2>/dev/null || true)
            echo "Generated bottle block for $PACKAGE"
          fi

          # Check if formula was actually changed
          if git diff --quiet Formula/"$PACKAGE".rb; then
            echo "No changes detected in formula, skipping"
            exit 0
          fi

          # Commit the updated formula
          git add Formula/"$PACKAGE".rb
          if [[ -n "$bottle_files" ]]; then
            git commit -m "$PACKAGE: update to $VERSION with bottles"
          else
            git commit -m "$PACKAGE: update to $VERSION"
          fi

          # Push the changes
          git push origin main

          # Create GitHub release with bottles
          if [[ -n "$bottle_files" ]]; then
            echo "Creating release $PACKAGE-$VERSION"
            gh release create "$PACKAGE-$VERSION" \
              --title "$PACKAGE $VERSION" \
              --notes "Automated release of $PACKAGE version $VERSION" \
              *.bottle.* || echo "Release creation failed or already exists"
          fi

  cleanup:
    needs: [detect-updates, update-formula, integrate-bottles]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('bottles-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
